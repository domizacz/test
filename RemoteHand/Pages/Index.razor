@page "/"
@using Data;


Remote Hand List for 
<p>
  <button class="btn " @onclick="Countout">-</button>
  <button @onclick="@calend" class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#collapseWidthExample" aria-expanded="false" aria-controls="collapseWidthExample">
    @friday.Month/@friday.Day/@friday.Year 
  </button><button class="btn " @onclick="IncrementCount">+</button>
</p>
<div style="min-height: 20px;">
  <div class="@collapse" id="">
    <div class="card card-body" style="width: 200px;">
      <section style="display:grid; grid-template-columns: repeat(7, 1fr); grid-gap: 5px;">

    @for(int i = 1; i<dumdays; i++)
    {
        <div></div>
    }

    @for(int i = 1; i<= dayinmon.Day; i++)
    {
                    @if (@i == friday.Day)
                    {<div style="text-align:center; color:red;">@i</div>}
        else           

                            {
                                <div class="text-primary" style="text-align:center; " @onclick="() => selectday(i)">@i</div>
                            }
                }

</section>
      
    </div>
  </div>
</div>



<div class="input-group flex-nowrap">
  <input type="text" class="form-control" placeholder="Client" aria-label="Client" aria-describedby="addon-wrapping" @bind="@Client">
  <input type="text" class="form-control" placeholder="Case" aria-label="Case" aria-describedby="addon-wrapping" @bind="@Case">
  <input type="text" class="form-control" placeholder="Aria" aria-label="Aria" aria-describedby="addon-wrapping" @bind="@Aria" >
  <input type="text" class="form-control" placeholder="Location" aria-label="Location" aria-describedby="addon-wrapping" @bind="@Location">
  <input type="text" class="form-control" placeholder="Task" aria-label="Task" aria-describedby="addon-wrapping" @bind="@Taskmod">
  <input type="text" class="form-control" placeholder="Instruction" aria-label="Task" aria-describedby="addon-wrapping" @bind="@Instruction">
  <input type="text" class="form-control" placeholder="Details" aria-label="Details" aria-describedby="addon-wrapping" @bind="@Deails">
  <input type="text" class="form-control" placeholder="Support" aria-label="Support" aria-describedby="addon-wrapping" @bind="@Support">
  <input type="text" class="form-control" placeholder="Networking" aria-label="Networking" aria-describedby="addon-wrapping" @bind="@Networking">
  <input type="text" class="form-control" placeholder="Remote Hands" aria-label="Remote Hands" aria-describedby="addon-wrapping" @bind="RemoteHand">
  <div class="col-auto">
    <button type="submit" class="btn btn-primary mb-3" @onclick="add">Add</button>
  </div>
</div>


<table class="table table-striped table-hover">
   
 <thead>
  <tr class="table-active">
    <td class="table-primary">Client</td>
    <td class="table-primary">Location</td>
    <td class="table-primary">Case</td>
    <td class="table-primary">Task</td>
    <td class="table-primary">Details</td>
    <td class="table-primary">Instruction</td>
    <td class="table-primary">Status</td>
    <td class="table-primary">Tested</td>
    <td class="table-primary">Support</td>
    <td class="table-primary">Networking</td>
    <td class="table-primary">Remote Hands</td>
    <td class="table-primary">Date Added</td>
    <td class="table-primary"></td>
   </tr>
   </thead>
 

   <tbody>
    @foreach(ClassRH RMHList in ListofRemote)
    {
        @if (@Area != @RMHList.Area)
            {
                
                <tr>            
                        <td class="table-info text-center table-primary" colspan="12"><b>@(Area = RMHList.Area)</b></td>
           </tr>
            }
    @if (DateOnly.FromDateTime(friday)==RMHList.Data_work)
    {
    
            <tr>
    <td scope="row">@RMHList.Clinet</td>
    <td class="">@RMHList.Location</td>
    <td class="">@RMHList.Case</td>
    <td class="">@RMHList.Task</td>
    <td class="">@RMHList.Details</td>
    <td class=".container-sm text-truncate"> @LimitText(@RMHList.Instruction)</td>
    <td class="">
        <select class="form-select form-select-sm" aria-label=".form-select-sm example">
            
             @foreach(string stat in status_lab)
                    {
                        if(RMHList.status== stat)
                        {<option selected value="@stat">@stat</option>}else
                        {<option value="@stat">@stat</option>}
                        
                    }
                </select>
</td>
    <td class="">@RMHList.tested</td>
    <td class="">@RMHList.Support</td>
    <td class="">@RMHList.Networking</td>
    <td class="">@RMHList.RemoteHand</td>
    <td class="">@RMHList.Date_Added.Date</td>
    <td class=""><button type="submit" class="btn btn-warning" @onclick="() => edit(RMHList.id)">Edit</button> <button type="submit" class="btn btn-danger" @onclick="() => del(RMHList.id)">DEL</button></td>
   </tr>
   }
   
}
  </tbody>

 

</table>



@code {
    
    @using Data;





    private string Taskmod { get; set; }
    private string Client { get; set; }
    private string Case { get; set; }
    private string Aria { get; set; }
    private string Location { get; set; }
    private string Deails { get; set; }
    private string Instruction { get; set; }
    private string Support { get; set; }
    private string Networking { get; set; }
    private string RemoteHand { get; set; }
    public int ContRecord { get; set; } 


    

    public DateTime friday = DateTime.Now;
    public DateOnly data =new DateOnly( DateTime.Today.Year , DateTime.Today.Month, DateTime.Today.Day);
    public string collapse = "collapse";
    public List<ClassRH> ListofRemote;
    public List<string> status_lab = new List<string>() {"Pending", "Sent", "Provided", "Tested", "Notified", "Completed", "Delayed", "Cancle"};
    public Demo temp = new Demo();
    public string Area;









    public DateOnly DayNowC;
    public string DayMonthC;
    public int dumdays;
    public DateOnly dayinmon;


    public void calendar_drive()
    {
        //DateTime friday =indexpage.friday;
        //DayNowC =new  DateOnly(friday.Year , friday.Month, 1 );
        DayNowC = new DateOnly(friday.Year, friday.Month, 1);
        //DayNowC =new  DateOnly( DateTime.Today.Year , DateTime.Today.Month, 1 );
        dayinmon = DayNowC.AddMonths(1).AddDays(-1);

        DayMonthC = DayNowC.Month switch
        {
            1 => "January",
            2 => "February",
            3 => "March",
            4 => "April",
            5 => "May",
            6 => "June",
            7 => "July",
            8 => "August",
            9 => "September",
            10 => "October",
            11 => "November",
            12 => "December",
            _ => ""
        };
        dumdays = (int)DayNowC.DayOfWeek;

    }






    public void selectday(int i)
    {
        friday = DateTime.day(i);
    }



    public void del(int a)
    {
        var itemToRemove = ListofRemote.Single(r => r.id == a);
        ListofRemote.Remove(itemToRemove);
    }
    public void edit(int a)
    {
        var itemToEdit = ListofRemote.Single(r => r.id == a);
        Taskmod = itemToEdit.Task;
        Client = itemToEdit.Clinet;
        Case = itemToEdit.Case;
        Aria = itemToEdit.Area;
        Instruction = itemToEdit.Instruction;
        Location = itemToEdit.Location;
        Deails = itemToEdit.Details;
        Support = itemToEdit.Support;
        Networking = itemToEdit.Networking;
        RemoteHand = itemToEdit.RemoteHand; 
    }

    public void add()
    {

        ContRecord++;
        ClassRH addrequest = new ClassRH() {id=ContRecord, Clinet=@Client,Location=@Location, Area=@Aria , Case=@Case ,Task=@Taskmod, Details=@Deails , Instruction=@Instruction, status="Pending", Support=@Support, Networking=@Networking, RemoteHand=@RemoteHand, Date_Added=DateTime.Today, Data_work=DateOnly.FromDateTime(friday) };

        ListofRemote.Add(addrequest);
        ListofRemote.Sort(delegate(ClassRH x, ClassRH y)
       {
           if (x.Area == null && y.Area == null) return 0;
           else if (x.Area == null) return -1;
           else if (y.Area == null) return 1;
           else return x.Area
           .CompareTo(y.Area);
       });



        Taskmod = string.Empty;
        Client = string.Empty;
        Case = string.Empty;
        Aria = string.Empty;
        Instruction = string.Empty;
        Location = string.Empty;
        Deails = string.Empty;
        Support = string.Empty;
        Networking = string.Empty;
        RemoteHand = string.Empty;


    }

    protected override async Task OnInitializedAsync()
    {


        calendar_drive();
        page();

        fri_day(0);


    }

    public void page()
    {
        ListofRemote = temp.DemoRH();

        ListofRemote.Sort(delegate(ClassRH x, ClassRH y)
       {
           if (x.Area == null && y.Area == null) return 0;
           else if (x.Area == null) return -1;
           else if (y.Area == null) return 1;
           else return x.Area
           .CompareTo(y.Area);
       });
        ContRecord = ListofRemote.Count();
    }

    public void IncrementCount()
    {
        fri_day(7); 
     calendar_drive();
    }
    public void Countout()
    {
        fri_day(-7);
       calendar_drive();
        
    }

    public void calend()
    {
        if (collapse == "collapse")
        { collapse = ""; }
        else {collapse = "collapse"; }

    }
    public void fri_day(int day)
    {
        int a = 0;
        if (day == 0)
        {
            while (a < 2)
            {

                if (friday.DayOfWeek == DayOfWeek.Friday)
                {
                    a = 2;

                }
                else
                {
                    friday = friday.AddDays(1);
                }
            }
        }
        else{

            friday= friday.AddDays(day);

        }
        //TM.friday = new DateOnly(friday.Year, friday.Month, 1);
        
    }
    public string LimitText (string text)
    {
        if(text.LongCount()>12)
        {
            return text.Substring(0, 12)+"...";
        }
        else
        { 
            return text;
        }
    }



}
