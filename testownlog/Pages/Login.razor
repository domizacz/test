@page "/"
@using testownlog.Models
@using  Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> userManager;
@inject SignInManager<ApplicationUser> signInManager;
@inject NavigationManager navManager;



<h3>login</h3>


@message
<div class="form-group">
        <label>Email</label>
        <input name="email" class="form-control" @bind-value="email"/>
    </div>
    <div class="form-group">
        <label>Password</label>
        <input name="password" class="form-control" @bind-value="password" />
    </div>
    <button class="btn btn-primary" type="submit" @onclick="Logins">Log In</button>




@code {
    public string message;
    public string email ="test@test.t";
    public string password = "Today1@Today";
    

    protected async Task OnInitializedAsync (UserManager<ApplicationUser> userManager, SignInManager<ApplicationUser> signInManager)
    {
        this.userManager = userManager;
        this.signInManager = signInManager;
    }


    public async Task OnGetAsync()
        {
            
            

            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);

            await signInManager.GetExternalAuthenticationSchemesAsync();

            
        }


    public async Task Logins()
    {

        ApplicationUser appUser = await userManager.FindByEmailAsync(email);
        if (appUser != null)
        {
            

            SignInResult result = await signInManager.PasswordSignInAsync(appUser, password, false, false);
                
                if (result.Succeeded)
                {
                    message = "done";
                    // navManager.NavigateTo("/");
                }
            

        }
        message= "Login Failed: Invalid Email or Password";
    
}


public async Task Logout()
{
    await signInManager.SignOutAsync();
    navManager.NavigateTo("/");
}
}
